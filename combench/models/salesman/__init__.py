problem1 = {
    'name': 'traveling-salesman-problem1',
    'cities': [(61, 16), (4, 44), (37, 26), (47, 72), (100, 85), (40, 93), (2, 73), (19, 85), (79, 50)],
    'costs': [(71, 55), (68, 34), (46, 1), (15, 41), (58, 37), (91, 12), (28, 10), (18, 98), (46, 88)],
}

# problem 2 only has 5 cities
problem2 = {
    'name': 'traveling-salesman-problem2',
    'cities': [(59, 1), (1, 9), (11, 20), (14, 65), (29, 10)],
    'costs': [(71, 55), (68, 34), (46, 1), (15, 41), (58, 37)],
}

# problem 3 has 55 cities
problem3 = {
    'name': 'traveling-salesman-problem3',
    'cities': [(22.770882462133223, 26.396168064605853), (54.29588273802408, 40.67386296864669), (77.97240465727086, 49.027707173668745), (67.10930015190793, 93.47104077028654), (28.332236360802774, 80.88314590947219), (64.6491634404088, 33.591884852964704), (59.510217640768595, 63.85076855635785), (10.717996203878656, 10.472075516768985), (87.4661414123912, 95.17713052150046), (79.68565121246799, 35.40934468222665), (98.86628114226285, 10.907643538889278), (65.34727733789757, 6.017332620835036), (75.89522249238286, 10.083922621502694), (74.5195103304485, 8.079236953986602), (1.892779263513189, 89.88028952315794), (95.83398743681275, 59.79771854926857), (24.380331930283706, 56.309482269216375), (15.542664674542028, 74.70323567489314), (97.08275590927555, 43.96366380421096), (46.227274280122366, 91.59133057260401), (48.96774120505678, 29.28992959663591), (99.60020084828503, 50.418379757191666), (81.3084309125281, 34.42986734721567), (38.03933126333816, 16.964235089052593), (3.2730533542357554, 41.4148950318523), (52.72987154173167, 91.40388216017246), (70.73331201454644, 63.606750258614234), (82.41910417242883, 4.530978918831852), (40.04204237827045, 20.956890337691767), (51.16770117020722, 14.94424913441864), (80.64077671900432, 33.93078919543777), (29.639226191413503, 31.46828171756839), (57.43245672317266, 98.90411644202378), (37.32850776290597, 89.75996514964892), (35.35715182425698, 27.36638878580362), (81.08341497592585, 32.86988174205402), (81.86318294581241, 22.263579833487956), (18.501753511641105, 49.762886960087414), (62.82672947912226, 98.55077791600743), (72.69134057894388, 80.444059741193), (47.418165812034154, 83.4599296660078), (3.293906073507069, 1.4187356472054602), (31.52698302300504, 24.455720595955054), (75.47283210065665, 35.13297129842916), (38.1754283974235, 14.480495054883491), (93.44168950107864, 85.8556510653548), (44.74054356148074, 46.5808468611528), (71.80363383576668, 63.56534311272618), (41.97612927595951, 32.23533201237859), (21.35230325800208, 5.934692674509767), (6.5265762223200685, 52.05167953129527), (58.91147048168194, 55.0230148957777), (45.93865939661104, 3.4120146865507572), (87.28077844202956, 63.73572140599363), (53.21487469461545, 93.04660917370616)],
    'costs': [(22.770882462133223, 26.396168064605853), (54.29588273802408, 40.67386296864669), (77.97240465727086, 49.027707173668745), (67.10930015190793, 93.47104077028654), (28.332236360802774, 80.88314590947219), (64.6491634404088, 33.591884852964704), (59.510217640768595, 63.85076855635785), (10.717996203878656, 10.472075516768985), (87.4661414123912, 95.17713052150046), (79.68565121246799, 35.40934468222665), (98.86628114226285, 10.907643538889278), (65.34727733789757, 6.017332620835036), (75.89522249238286, 10.083922621502694), (74.5195103304485, 8.079236953986602), (1.892779263513189, 89.88028952315794), (95.83398743681275, 59.79771854926857), (24.380331930283706, 56.309482269216375), (15.542664674542028, 74.70323567489314), (97.08275590927555, 43.96366380421096), (46.227274280122366, 91.59133057260401), (48.96774120505678, 29.28992959663591), (99.60020084828503, 50.418379757191666), (81.3084309125281, 34.42986734721567), (38.03933126333816, 16.964235089052593), (3.2730533542357554, 41.4148950318523), (52.72987154173167, 91.40388216017246), (70.73331201454644, 63.606750258614234), (82.41910417242883, 4.530978918831852), (40.04204237827045, 20.956890337691767), (51.16770117020722, 14.94424913441864), (80.64077671900432, 33.93078919543777), (29.639226191413503, 31.46828171756839), (57.43245672317266, 98.90411644202378), (37.32850776290597, 89.75996514964892), (35.35715182425698, 27.36638878580362), (81.08341497592585, 32.86988174205402), (81.86318294581241, 22.263579833487956), (18.501753511641105, 49.762886960087414), (62.82672947912226, 98.55077791600743), (72.69134057894388, 80.444059741193), (47.418165812034154, 83.4599296660078), (3.293906073507069, 1.4187356472054602), (31.52698302300504, 24.455720595955054), (75.47283210065665, 35.13297129842916), (38.1754283974235, 14.480495054883491), (93.44168950107864, 85.8556510653548), (44.74054356148074, 46.5808468611528), (71.80363383576668, 63.56534311272618), (41.97612927595951, 32.23533201237859), (21.35230325800208, 5.934692674509767), (6.5265762223200685, 52.05167953129527), (58.91147048168194, 55.0230148957777), (45.93865939661104, 3.4120146865507572), (87.28077844202956, 63.73572140599363), (53.21487469461545, 93.04660917370616)]
}




import random
import matplotlib.pyplot as plt
import json
import config
import os

mt_tsp_path = os.path.join(config.database_dir, 'multitask-tsp.json')

def generate_problem_set(num_problems, num_cities):
    problems = []
    for i in range(num_problems):
        cities = [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(num_cities)]
        problem = {
            'name': f'multitask-learning-tsp-{num_cities}-{i}',
            'cities': cities,
            'costs': [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(num_cities)]
        }
        problems.append(problem)
    # with open(mt_tsp_path, 'w') as f:
    #     json.dump(problems, f, indent=4)
    return problems

def load_problem_set():
    with open(mt_tsp_path, 'r') as f:
        problems = json.load(f)
    return problems


def generate():
    # Generate 9 coordinate pairs
    coordinates = [
        (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        # (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        # (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        # (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
        # (random.randint(0, 100), random.randint(0, 100)),  # Cluster 1
    ]

    print(coordinates)

    # Plot the coordinates to visualize
    x_vals, y_vals = zip(*coordinates)
    plt.scatter(x_vals, y_vals)

    for i, (x, y) in enumerate(coordinates):
        plt.text(x, y, f'({x},{y})', fontsize=9, ha='right')

    plt.title('Difficult TSP Coordinates')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.show()

def plot_route(cities, route):
    # Extract coordinates from the cities list using the route vector
    route_coords = [cities[i] for i in route]

    # Unzip the coordinates into x and y lists
    x_coords, y_coords = zip(*route_coords)

    plt.figure(figsize=(10, 8))

    # Plot the route
    plt.plot(x_coords, y_coords, 'o-', label='Route')

    # Highlight the start node
    start_node = route_coords[0]
    plt.plot(start_node[0], start_node[1], 'go', markersize=10, label='Start Node')

    # Annotate the points with their indices
    for i, (x, y) in enumerate(route_coords):
        plt.text(x, y, f'{route[i]}', fontsize=15, ha='right')

    # Add some additional features to the plot
    plt.title('Route Plot')
    plt.xlabel('X Coordinate')
    plt.ylabel('Y Coordinate')
    plt.legend()
    plt.grid(True)
    plt.show()




if __name__ == '__main__':
    # generate()
    #  plot_route(problem2['cities'],
    #             [
    #          2,
    #          4,
    #          0,
    #          1,
    #          2
    #      ]
    # )
    generate_problem_set(10000, 55)






